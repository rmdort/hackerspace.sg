/**
 * Clearfix
 */

%clearfix {
  &:after {
      content: ".";
      display: block;
      clear: both;
      visibility: hidden;
      line-height: 0;
      height: 0;
  }
}


/**
 * Inline List
 */

@mixin list-inline{

  list-style: none;
  margin-left: 0;

  > li{
    display: inline;
  }
}



/** 
 * Strip Units
 */

@function strip-unit($number) {
  @return $number / ($number * 0 + 1);
}



/* No List Style */

@mixin list-none{
  list-style: none;
  margin-left:0;
  padding-left:0;
}




// Clearfix

@mixin clearfix {
  @extend %clearfix;
}


// Hover Link Mixin

@mixin hover-link {
  text-decoration: none;
  &:hover {
    text-decoration: if($underline-on-hover, underline, none );
  }
}



// Convert Pixel to Em

@function calc-em($target-px) {
  @return ($target-px / 16px) * 1em;
}



/**
 * Grids
 */

/**
 * Calculates Percentage for each column
 */

@function gridCalc($colNumber, $grid-columns) {
  @return percentage(($colNumber / $grid-columns));
}

/**
 * Convert numbers to words
 * 1 => 'one'
 */

@function convert-number-to-word($num) {
  $count:1;
  @each $word in one,two,three,four,five,six,seven,eight,nine,ten,eleven,
    twelve,thirteen,fourteen,fifteen,sixteen,seventeen,eighteen,nineteen,
    twenty,twentyone,twentytwo,twentythree,twentyfour{
    @if ($count == $num) { @return $word; }
    $count: $count + 1;
  }
  @return "invalid";
}

/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
@mixin font-size($font-size, $line-height:true){
    font-size:$font-size;
    font-size:($font-size / $base-font-size)*1rem;
    @if $line-height == true{
        line-height:ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    }
}

/**
 * Rem Units
 * Converts properties to both REM and Pixel Values. Based on line-height
 * @include rem(margin-bottom, 0.5)
 * @include rem(padding, 1, 20px);
 */

@mixin rem($property, $multiplier: 1, $unit: $base-spacing-unit){

  @if type-of($multiplier) != "number"{

    $unit: $multiplier;
    $multiplier: 1;
  }
  @include rem-full($multiplier, $property, $unit);
}

/**
 * Helper function for REM
 * @include rem-full(padding, 10px 20px 10px 30px);
 */

@mixin rem-full($multiplier, $property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $base-font-size / 1rem * 1;
  // Print the first line in pixel values
  
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values * $multiplier;
    #{$property}: $px-values / $baseline-rem * $multiplier; 
  }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: ();
    $pixel-values: ();
    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of( $value ) != "number" {
        $rem-values: append($rem-values, $value); 
        $pixel-values: append($pixel-values, $value);
      }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem * $multiplier); 
        $pixel-values: append($pixel-values, $value * $multiplier);
      } 
    }
    // Return the property and its list of converted values
    #{$property}: $pixel-values;
    #{$property}: $rem-values; 
  } 
}


// IMPORTING links/link-colors
// Set all the colors for a link with one mixin call.
// Order of arguments is:
//
// 1. normal
// 2. hover
// 3. active
// 4. visited
// 5. focus
//
// Those states not specified will inherit.
// Mixin to an anchor link like so:
//     a
//       +link-colors(#00c, #0cc, #c0c, #ccc, #cc0)

@mixin link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false) {
  color: $normal;
  @if $visited {
    &:visited {
      color: $visited; } }
  @if $focus {
    &:focus {
      color: $focus; } }
  @if $hover {
    &:hover {
      color: $hover; } }
  @if $active {
    &:active {
      color: $active; } } }